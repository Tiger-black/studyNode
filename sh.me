
今天，在系统管理等领域，Shell编程仍然起着不可忽视的作用。深入地了解和熟练地掌握Shell编程，是每一个Linux用户的必修 功课之一。
    Linux的Shell种类众多，常见的有：Bourne Shell（/usr/bin/sh或/bin/sh）、Bourne Again Shell（/bin/bash）、C Shell（/usr/bin/csh）、K Shell（/usr/bin/ksh）、Shell for Root（/sbin/sh），等等。
    不同的Shell语言的语法有所不同，所以不能交换使用。每种Shell都有其特色之处，基本上，掌握其中任何一种 就足够了。
    在本文中，我们关注的重点是Bash，也就是Bourne Again Shell，由于易用和免费，Bash在日常工作中被广泛使用；同时，Bash也是大多数Linux系统默认的Shell。
    在一般情况下，人们并不区分 Bourne Shell和Bourne Again Shell，所以，在下面的文字中，我们可以看到#!/bin/sh，它同样也可以改为#!/bin/bash。
    
    利用vi等文本编辑器编写Shell脚本的格式是固定的，如下：
        #!/bin/sh
        #comments
        Your commands go here
        首行中的符号#!告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。如果首行没有这句话，在执行脚本文件的时候，将会出现错误。
        后续的部分就是主程序，Shell脚本像高级语言一样，也有变量赋值，也有控制语句。除第 一行外，以#开头的行就是注释行，直到此行的结束。
        如果一行未完成，可以在行尾加上"，这个符号表明下一行与此行会合并为同一行。

    编辑完毕，将脚本存盘为filename.sh，文件名后缀sh表明这是一个Bash脚本文件。执行脚本的时候，要先将脚本文件的属性改为可执行的：
        chmod +x filename.sh

    执行脚本的方法是：
        ./filename.sh

    下面我们从经典的“hello world”入手，看一看最简单的Shell脚本的模样。
        #!/bin/sh
        #print hello world in the console window
        a = "hello world"
        echo $a

    Shell Script是一种弱类型语言，使用变量的时候无需首先声明其类型。新的变量会在本地数据区分配内存进行存储，这个变量归当前的Shell所有，任何子进 程都不能访问本地变量。这些变量与环境变量不同，环境变量被存储在另一内存区，叫做用户环境区，这块内存中的变量可以被子进程访问。变量赋值的方式是：
        variable_name = variable_value

    如果对一个已经有值的变量赋值，新值将取代旧值。取值的时候要在变量名前加$，$variable_name可以在引号中使用，这一点和其他高级语言是明显不同的。
    如果出现混淆的情况，可以使用花括号来区分，例如：
        echo "Hi, $as"
        就不会输出“Hi, hello worlds”，而是输出“Hi，”。
        这是因为Shell把$as当成一个变量，而$as未被赋值，其值为空。正确的方法是：
        echo "Hi, ${a}s"   
        单引号中的变量不会进行变量替换操作。 

    关于变量，还需要知道几个与其相关的Linux命令。
        env用于显示用户环境区中的变量及其取值；
        set用于显示本地数据区和用户环境区中的变量及其取值；
        unset用于删除指定变量当前的取值，该值将被指定为NULL；
        export命令用于将本地数据区中的变量转移到用户环境区。
        
    下面带着大家学学if语句：
        先抛出一个问题：写一个脚本，判断当前所用的shell
            #!/bin/sh
            #注意if的空格以及[]里面的空格这里错了半天啊
            if [ "$SHELL" = "/bin/bash" ];then
                echo "your login shell is the bash \n"
                echo "SHELL is : $SHELL"
            else 
                echo "your login shell is not bash but $SHELL"
            fi

            #[ -f "somefile" ] : 判断是否是一个文件
            #[ -x "/bin/ls" ] : 判断/bin/ls是否存在并有可执行权限
            #{ -n "$var" } : 判断$var变量是否有值
            #[ "&a" = "$b" ] : 判断$a和$b是否相等
            [ -f "/etc/shadow" ] && echo "This computer uses shadow passwords"
            if [ -f "/etc/shadow" ];then
                echo "电脑密码使用隐藏字符"
            else
                echo "并没有"
            fi


3.为了让大家更加熟练的运用shell，那么练习下吧，问题：写一个脚本使其从一个文件里面读入有echo的语句，并把其写在本文件末尾;

复制代码
#!/bin/sh
#-r代表此文件是否可读，具体见man test
mailfolder=/home/handsome/work/linux_learn/shell_learn/readme.txt
#[ -r "$mailfolder" ] || { echo "Can not read $mailfolder" ; exit 1;}
#echo "$mailfolder has mail from : "
#grep "^echo " $mailfolder

if [ -r "$mailfolder" ];then
    echo "$mailfolder has massage from : "
    echo | grep '^echo ' $mailfolder >> readme2.txt
    chmod +r readme2.txt
    cat readme2.txt >> $mailfolder
    rm -f readme2.txt
else
    echo "Can not read $mailfolder"
    touch $mailfolder
    chmod +rw $mailfolder
    echo "echo 人生自古谁无死，六区蛋清找旱情! " >> $mailfolder
fi
复制代码
这里由于重定向不能本文见输出到本文件输出，于是我就想了个办法，新建个文件，再重定向到这个文件，大神有别的简单方法可以下面留言拍砖;

4.接下来，我们练习下while的用法，老规矩具体问题来分析;

问题：写一个脚本（不建议使用for变量--for是根据空格取值）

1.设定变量FILE的值为/etc/passwd

2.依次向/etc/passwd中的每个用户问好，并且说出对方的ID什么（Hello,root，your UID is0.）

3.统计一个有多少个用户

 

复制代码
#!/bin/bash
fl=/etc/passwd
count=`cat $fl | wc -l`
#下面是一个管道，下面循环读文件中的每一行
cat $fl |
while read line
do
    user=`echo $line|awk -F ':' '{print $1}'`
    #代表以 ：分段$1就是取第1段
    uid=`echo $line|awk -F ':' '{print $3}'`
    echo "hello, $user Your UID is $uid"
done
echo "====User_count:$count===="
#前面求得的用户数
复制代码
 

这里要注意到awk的用法，可以找linux的男人解决;

5.练习一下for语句吧

问题：写个脚本;

1.切换工作目录至/tmp
 
 
2.依次向/tmp目录中的每个文件或子目录问好（Hello,log）
 
 
3.统计/tmp目录下共有多个文件，并显示出来

#!/bin/bash
cd /tmp
for i in /tmp/*
do
    echo "Hello , $i"
done
count=`ls -l|grep '^-'|wc -l`
echo "====file_count:$count===="
 
 这个问题就相对简单了些，一个for语句就可以搞定，当然可以while搞搞

6.那么问题来了：

question：

传递两个整数给脚本，让脚本分别计算并显示这两个整数的和，差，积，商
 
复制代码
#!/bin/bash
a=$1
b=$2
[ -z $a ] && echo "please \$1 number1" && exit 1
[ -z $b ] && echo "please \$2 number2" && exit 2
[ ! $# -eq 2 ] && echo "--please num1 num2" && exit 3
# $#传递到脚本的参数个数
# -eq相当于=, -ne相当于不等于， -ge >= , -gt >, -le <=, -lt <
echo "$a + $b = $(($a+$b))"
echo "$a - $b = $(($a - $b))"
echo "$a * $b = $(($a*$b))"
echo "$a / $b = $(($a/$b))"
复制代码
 
这里要注意的是，需要传入两个参数;

具体用到的一些知识请看下面：





读到这里大家对上面的小脚本是不是感觉特别easy了，哈哈;

7.写一个脚本;求1到100的和？

复制代码
#!/bin/bash
sum=0
i=1
while [ $i -le 100 ]
do
    sum=$(($sum + $i))
    i=$(($i+1))
done
echo "$sum"
复制代码
这个脚本就so easy了;

8.接下来，我们写个很实用的脚本吧，假设你现在在机房，你想要看看机房哪些ip在开着，方便咱。。。，是吧。

我们可以 通过ping命令测试192.168.0.151到192.168.0.254之间的所有主机是否在线

 

复制代码
#!/bin/bash
for i in `seq 2 254`
do
    ping -c1 -w1 192.168.51.$i > /dev/null 2>&1
    #-c可以指定ping的次数，-w测试的时间 -w 1就是1秒中无论成功失败都结束
    #-c -w后面都要输入参数所以都要带上l
    #$?代表最后命令退出状态，0代表没错，其他代表有错
    [ $? -eq 0 ] && echo "192.168.51.$i IP is UP!" || echo "192.168.51.$i IP is down!"
done
复制代码
 

在这里2>&1代表不显示错误信息，其实就是把错误重定向到标准输出，然后重定向到/dev/null，/dev/null就是个黑洞，写入的任何东西都会丢失，其实简要说就是把正确或错误的输出扔到垃圾桶。

写到这里大家是不是感觉耳目一新呐，哈哈！

随笔练习：还有点bug

复制代码
#/bin/bash
i=1
sum=0
#while
while [ $i -le 100 ]
do
        ((sum=sum+i))
        ((i=i+1))
done
echo $sum
#for
sum=0
for ((j=1;j<=100;j++))
do
        ((sum=sum+j))
done
echo $sum

#select
select flag in $@
do
        case $flag in
                $1)echo $1;;
                $2)echo $2;;
                $3)echo $3;;
                $4)echo $4;;
                *)echo "input error"
                break ;;
        esac
done
#shift
echo -e "the all arg is\n"
while [ $1 ]
do
        echo $1
        shift
done
#if
num=`ls | wc -l`
[ num == 0 ] && echo -e "have no file\n" || echo -e "there are $num files\n"
for file in `ls`
do
        echo "this file $file is "
        [ -f $file ] && echo -e "ordinary file"
        if [ -d $file ];then
                echo -e "dictionary file";
            fi
done

#function
filename=""
rename(){
        filename=echo `date` | awk -F ' ' '{print $1 $2 $3}'
}
rename
echo -e "filename is $filename"
[ $? == 0 ] && mkdir $filename || echo -e "have error\n"