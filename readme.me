什么是NodeJS  ①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳

JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。
而对于需要独立运行的JS，NodeJS就是一个解析器。
每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。
例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。
而运行在NodeJS中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。

总结 
 1、NodeJS是一个JS脚本解析器，任何操作系统下安装NodeJS本质上做的事情都是把NodeJS执行程序复制到一个目录，
 然后保证这个目录在系统PATH环境变量下，以便终端下可以使用node命令。
 2、终端下直接输入node命令可进入命令交互模式，很适合用来测试一些JS代码片段，比如正则表达式。
 3、NodeJS使用CMD模块系统，主模块作为程序入口点，所有模块在执行过程中只初始化一次。
 4、除非JS模块不能满足需求，否则不要轻易使用二进制模块，否则你的用户会叫苦连天。


    /usr/local/bin/node  node的路径


一、原生开发命令工具
    模块路径解析规则
    require函数支持斜杠（/）或盘符（C:）开头的绝对路径，也支持./开头的相对路径。
    但这两种路径在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整，变得牵一发动全身。
    因此，require函数支持第三种形式的路径，写法类似于foo/bar，并依次按照以下规则解析路径，直到找到模块位置。
    1、内置模块
        如果传递给require函数的是NodeJS内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如require('fs')。

    2、node_modules目录 
        NodeJS定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路径是/home/user/hello.js，
        在该模块中使用require('foo/bar')方式加载模块时，则NodeJS依次尝试使用以下路径。
        /home/user/node_modules/foo/bar
        /home/node_modules/foo/bar
        /node_modules/foo/bar

    3、NODE_PATH环境变量
        与PATH环境变量类似，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。
        NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用:分隔，在Windows下使用;分隔。
        例如定义了以下NODE_PATH环境变量： NODE_PATH=/home/user/lib:/home/lib
        当使用require('foo/bar')的方式加载模块时，则NodeJS依次尝试以下路径。/home/user/lib/foo/bar 或者 /home/lib/foo/bar
    
    4、编写一个命令行工具 例子 two/xiaohusay
        （1）首先，使用 JavaScript 语言，写一个可执行脚本，可以通过#!注释来指定当前脚本使用的解析器 顶部加一行代码 #!/usr/bin/env node NodeJS会忽略掉位于JS模块首行的#!注释，不必担心这行注释是非法语句。
        （2）然后，我们使用以下命令赋予node-echo.js文件执行权限。 $ chmod +x /home/user/bin/node-echo.js 或者 $ chmod 755 hello
        （3）最后，我们在PATH环境变量中指定的某个目录下，例如在/usr/local/bin下边创建一个软链文件，文件名与我们希望使用的终端命令同名，命令如下：
        $ sudo ln -s /home/user/bin/node-echo.js /usr/local/bin/node-echo
        这样处理后，我们就可以在任何目录下使用node-echo命令了。
        另一种更好的做法，是在当前目录下新建 package.json ，写入下面的内容。
            {
                "name": "hello",
                "bin": {
                    "hello": "hello"
                }
            }  然后执行 npm link 命令。
    
    如果你已经 npm link 搞了一遍你再 link 一遍，会报如下错误。即使你 npm unlink 也会报错
    让你删除 /usr/local/bin/wcj 再 npm link ， 删除此目录运行 rm -rf /usr/local/bin/wcj

二、依赖 nodejs 原生开发命令工具比较麻烦，可以使用命令行框架帮助我们简化命令行开发。
    1、Commander 是一款重量轻，表现力强大的命令行框架。提供了用户命令行输入和参数解析强大功能。
        Commander 源自一个同名的Ruby项目。Commander.js 是 TJ 写的一个帮助快速开发Nodejs命令行工具的package。
        TJ这货是Nodejs社区里非常知名的高产作者。方便的定义option(包括option的描述和其回调函数)和子命令。

    2、shelljs 模块重新包装了 child_process，调用系统命令更加方便。它需要安装后使用。
        npm install --save shelljs
        然后，改写脚本。
        #!/usr/bin/env node
        var name = process.argv[2];
        var shell = require("shelljs");
        shell.exec("echo hello " + name);
        上面代码是 shelljs 的本地模式，即通过 exec 方法执行 shell 命令。此外还有全局模式，允许直接在脚本中写 shell 命令。
        require('shelljs/global');
        if (!which('git')) {
            echo('Sorry, this script requires git');
            exit(1);
        }
        mkdir('-p', 'out/Release');
        cp('-R', 'stuff/*', 'out/Release');
        cd('lib');
        ls('*.js').forEach(function(file) {
            sed('-i', 'BUILD_VERSION', 'v0.1.2', file);
            sed('-i', /.*REMOVE_THIS_LINE.*\n/, '', file);
            sed('-i', /.*REPLACE_LINE_WITH_MACRO.*\n/, cat('macro.js'), file);
        });
        cd('..');
        if (exec('git commit -am "Auto-commit"').code !== 0) {
            echo('Error: Git commit failed');
            exit(1);
        }

    3、 yargs 模块 
        shelljs 只解决了如何调用 shell 命令，而 yargs 模块能够解决如何处理命令行参数。它也需要安装。
        $ npm install --save yargs
        yargs 模块提供 argv 对象，用来读取命令行参数。请看改写后的 hello 。
        #!/usr/bin/env node
        var argv = require('yargs').argv;
        console.log('hello ', argv.name);

        process.argv 的原始返回值如下。
        $ node hello --name=tom
        [ 'node','/path/to/myscript.js','--name=tom' ]
        yargs 可以上面的结果改为一个对象，每个参数项就是一个键值对。
        $ node hello --name=tom
        argv = {name: tom};
        如果将 argv.name 改成 argv.n，就可以使用一个字母的短参数形式了。可以使用 alias 方法，指定 name 是 n 的别名。
        #!/usr/bin/env node
        var argv = require('yargs')
            .alias('n', 'name')
            .argv;
        console.log('hello ', argv.n);这样一来，短参数和长参数就都可以使用了。

        argv 对象有一个下划线（_）属性，可以获取非连词线开头的参数。 跟在 -X 后面的第一个参数不匹配 例如 -n a b c  下划线只匹配bc
        console.log(argv._);
        
        命令行参数的配置
        yargs 模块还提供3个方法，用来配置命令行参数。
        demand：是否必选
        default：默认值
        describe：提示
        #!/usr/bin/env node
        var argv = require('yargs')
            .demand(['n'])
            .default({n: 'tom'})
            .describe({n: 'your name'})
            .argv;
        console.log('hello ', argv.n);

        options 方法允许将所有这些配置写进一个对象。
        var argv = require('yargs')
        .option('n', {
            alias : 'name',
            demand: true,
            default: 'tom',
            describe: 'your name',
            type: 'string'
        })
        .argv;
        有时，某些参数不需要值，只起到一个开关作用，这时可以用 boolean 方法指定这些参数返回布尔值
        var argv = require('yargs')
            .boolean(['n'])
            .argv;
        boolean 方法也可以作为属性，写入 option 对象。
        .option('n', {
            boolean: true
        })

        yargs 模块提供以下方法，生成帮助信息。
        usage：用法格式
        example：提供例子
        help：显示帮助信息
        epilog：出现在帮助信息的结尾


        子命令 
            yargs 模块还允许通过 command 方法，设置 Git 风格的子命令。
            #!/usr/bin/env node
            var argv = require('yargs')
                .command("morning", "good morning", function (yargs) {
                    console.log("Good Morning");
                })
                .command("evening", "good evening", function (yargs) {
                    console.log("Good Evening");
                })
                .argv;

            console.log('hello ', argv.n);

            可以将这个功能与 shellojs 模块结合起来。
            #!/usr/bin/env node
            require('shelljs/global');
            var argv = require('yargs')
                .command("morning", "good morning", function (yargs) {
                    echo("Good Morning");
                })
                .command("evening", "good evening", function (yargs) {
                    echo("Good Evening");
                })
                .argv;

            console.log('hello ', argv.n);

        每个子命令往往有自己的参数，这时就需要在回调函数中单独指定。回调函数中，要先用 reset 方法重置 yargs 对象。

        #!/usr/bin/env node
            require('shelljs/global');
            var argv = require('yargs')
                .command("morning", "good morning", function (yargs) {  
                    echo("Good Morning");
                    var argv = yargs.reset()
                    .option("m", {
                        alias: "message",
                        description: "provide any sentence"
                    })
                    .help("h")
                    .alias("h", "help")
                    .argv;

                    echo(argv.m);
                })
                .argv;

    4、其他事项
        （1）返回值
            根据 Unix 传统，程序执行成功返回 0，否则返回 1 。
            if (err) {
                process.exit(1);
            } else {
                process.exit(0);
            }

        （2）重定向
            Unix 允许程序之间使用管道重定向数据。
            $ ps aux | grep 'node'
            脚本可以通过监听标准输入的data 事件，获取重定向的数据。
            process.stdin.resume();
            process.stdin.setEncoding('utf8');
            process.stdin.on('data', function(data) {
                process.stdout.write(data);
            });
            下面是用法。
            $ echo 'foo' | ./hello
            hello foo
        （3）系统信号
            操作系统可以向执行中的进程发送信号，process 对象能够监听信号事件。
            process.on('SIGINT', function () {
                console.log('Got a SIGINT');
                process.exit(0);
            });

            发送信号的方法如下。
            $ kill -s SIGINT [process_id]

     注意 
        1、命名不要太随意,避免重复
        2、有的时候cnpm 装的包不完整，需要执行npm
        3、没有仓库会报错 可以设置"repository": {"private": true},
        4、创建js的时候一定要先给与js文件设置权限
        5、妈的 这句一定要写对 #!/usr/bin/env node ！！！！！！！！ 不能有空格 找了一天问题
三、文件操作 File System [fail ˈsistəm]
    让前端觉得如获神器的不是NodeJS能做网络编程，而是NodeJS能够操作文件。
    小至文件查找，大至代码编译，几乎没有一个前端工具不操作文件。
    换个角度讲，几乎也只需要一些数据处理逻辑，再加上一些文件操作，就能够编写出大多数前端工具。本章将介绍与之相关的NodeJS内置模块。

    开门红
    1、NodeJS提供了基本的文件操作API，但是像文件拷贝这种高级功能就没有提供，因此我们先拿文件拷贝程序练手。
        与copy命令类似，我们的程序需要能接受源文件路径与目标文件路径两个参数。
        小文件拷贝
            我们使用NodeJS内置的fs模块简单实现这个程序如下。
            var fs = require('fs');
            function copy(src, dst) {
                fs.writeFileSync(dst, fs.readFileSync(src));
            }
            function main(argv) {
                copy(argv[0], argv[1]);
            }
            main(process.argv.slice(2));
            以上程序使用fs.readFileSync 从源路径读取文件内容，并使用fs.writeFileSync 将文件内容写入目标路径。
            
            readFileSync 同步版的fs.writeFile()  fs.writeFileSync(filename, data, [options])
            接收参数：
                filename      (String)            文件名称
                data        (String | Buffer)    将要写入的内容，可以使字符串 或 buffer数据。
                options        (Object)           option数组对象，包含：
                · encoding   (string)            可选值，默认 ‘utf8′，当data使buffer时，该值应该为 ignored。
                · mode         (Number)        文件读写权限，默认值 438
                · flag            (String)            默认值 ‘w'
            实现源码 fs.writeFileSync = function(path, data, options) {
                if (!options) {
                    options = { encoding: 'utf8', mode: 438 /*=0666*/, flag: 'w' };
                } else if (util.isString(options)) {
                    options = { encoding: options, mode: 438, flag: 'w' };
                } else if (!util.isObject(options)) {
                    throw new TypeError('Bad arguments');
                }
                assertEncoding(options.encoding);
                var flag = options.flag || 'w';
                var fd = fs.openSync(path, flag, options.mode);
                if (!util.isBuffer(data)) {
                    data = new Buffer('' + data, options.encoding || 'utf8');
                }
                var written = 0;
                var length = data.length;
                var position = /a/.test(flag) ? null : 0;
                try {
                    while (written < length) {
                    written += fs.writeSync(fd, data, written, length - written, position);
                    position += written;
                    }
                } finally {
                    fs.closeSync(fd);
                }
            };
            process  [ˈprəʊses]  是一个全局变量，可通过process.argv获得命令行参数。
            由于argv[0]固定等于NodeJS执行程序的绝对路径，argv[1]固定等于主模块的绝对路径，(mode路径，当前主模块绝对路径)
            因此第一个命令行参数从argv[2]这个位置开始
        大文件拷贝
            上边的程序拷贝一些小文件没啥问题，但这种一次性把所有文件内容都读取到内存中后再一次性写入磁盘的方式不适合拷贝大文件，内存会爆仓。
            对于大文件，我们只能读一点写一点，直到完成拷贝。因此上边的程序需要改造如下。
            var fs = require('fs');

            function copy(src, dst) {
                fs.createReadStream(src).pipe(fs.createWriteStream(dst));
            }

            function main(argv) {
                copy(argv[0], argv[1]);
            }

            main(process.argv.slice(2));
            以上程序使用fs.createReadStream创建了一个源文件的只读数据流，并使用fs.createWriteStream创建了一个目标文件的只写数据流，并且用pipe [paɪp] 方法把两个数据流连接了起来。
            连接起来后发生的事情，说得抽象点的话，水顺着水管从一个桶流到了另一个桶。
    2、API走马观花
        我们先大致看看NodeJS提供了哪些和文件操作有关的API。这里并不逐一介绍每个API的使用方法，官方文档已经做得很好了。
        (1) Buffer      （数据块）官方文档： http://nodejs.org/api/buffer.html
            JS语言自身只有字符串数据类型，没有二进制数据类型，因此NodeJS提供了一个与String对等的全局构造函数Buffer来提供对二进制数据的操作。
            除了可以读取文件得到Buffer的实例外，还能够直接构造，例如：var bin = new Buffer([ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]); 
            Buffer与字符串类似，除了可以用.length属性得到字节长度外，还可以用[index]方式读取指定位置的字节，例如：bin[0]; // => 0x68;
            Buffer与字符串能够互相转化，例如可以使用指定编码将二进制数据转化为字符串：var str = bin.toString('utf-8'); // => "hello"
            或者反过来，将字符串转换为指定编码下的二进制数据：var bin = new Buffer('hello', 'utf-8'); // => <Buffer 68 65 6c 6c 6f>
            Buffer与字符串有一个重要区别。字符串是只读的，并且对字符串的任何修改得到的都是一个新字符串，原字符串保持不变。至于Buffer，更像是可以做指针操作的C语言数组。
            例如，可以用[index]方式直接修改某个位置的字节。

            bin[0] = 0x48;
            而.slice方法也不是返回一个新的Buffer，而更像是返回了指向原Buffer中间的某个位置的指针，如下所示。

            [ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]
                ^           ^
                |           |
            bin     bin.slice(2)

            因此对.slice方法返回的Buffer的修改会作用于原Buffer，例如：
            var bin = new Buffer([ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]);
            var sub = bin.slice(2);

            sub[0] = 0x65;
            console.log(bin); // => <Buffer 68 65 65 6c 6f>

            也因此，如果想要拷贝一份Buffer，得首先创建一个新的Buffer，并通过.copy方法把原Buffer中的数据复制过去。
            这个类似于申请一块新的内存，并把已有内存中的数据复制过去。以下是一个例子。
            var bin = new Buffer([ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]);
            var dup = new Buffer(bin.length);

            bin.copy(dup);
            dup[0] = 0x48;
            console.log(bin); // => <Buffer 68 65 6c 6c 6f>
            console.log(dup); // => <Buffer 48 65 65 6c 6f>
            总之，Buffer将JS的数据处理能力从字符串扩展到了任意二进制数据。
        (2) Stream      （数据流）官方文档： http://nodejs.org/api/stream.html
            当内存中无法一次装下需要处理的数据时，或者一边读取一边处理更加高效时，我们就需要用到数据流。NodeJS中通过各种Stream来提供对数据流的操作。
            var rs = fs.createReadStream(pathname);
            rs.on('data', function (chunk) {
                doSomething(chunk);
            });
            rs.on('end', function () {
                cleanUp();
            });
            Stream基于事件机制工作，所有Stream的实例都继承于NodeJS提供的EventEmitter。https://nodejs.org/api/events.html

            上边的代码中data事件会源源不断地被触发，不管doSomething函数是否处理得过来。代码可以继续做如下改造，以解决这个问题。
            var rs = fs.createReadStream(src);
            rs.on('data', function (chunk) {
                rs.pause();
                doSomething(chunk, function () {
                    rs.resume();
                });
            });
            rs.on('end', function () {
                cleanUp();
            });


            stream.pause();     暂停流 [pɔ:z]
            stream.resume();   恢复流 [rɪ'zju:m]


            以上代码给 doSomething 函数加上了回调，因此我们可以在处理数据前暂停数据读取，并在处理数据后继续读取数据。

            此外，我们也可以为数据目标创建一个只写数据流，示例如下：
            var rs = fs.createReadStream(src);
            var ws = fs.createWriteStream(dst);

            rs.on('data', function (chunk) {
                ws.write(chunk);
            });

            rs.on('end', function () {
                ws.end();
            });
            我们把doSomething换成了往只写数据流里写入数据后，以上代码看起来就像是一个文件拷贝程序了。
            但是以上代码存在上边提到的问题，如果写入速度跟不上读取速度的话，只写数据流内部的缓存会爆仓。
            我们可以根据.write方法的返回值来判断传入的数据是写入目标了，还是临时放在了缓存了，并根据 drain [dren] 事件来判断什么时候只写数据流已经将缓存中的数据写入目标，可以传入下一个待写数据了。
            因此代码可以改造如下：
            var rs = fs.createReadStream(src);
            var ws = fs.createWriteStream(dst);

            rs.on('data', function (chunk) {
                if (ws.write(chunk) === false) {
                    rs.pause();
                }
            });

            rs.on('end', function () {
                ws.end();
            });

            ws.on('drain', function () {
                rs.resume();
            });
            以上代码实现了数据从只读数据流到只写数据流的搬运，并包括了防爆仓控制。因为这种使用场景很多，例如上边的大文件拷贝程序
            NodeJS直接提供了.pipe方法来做这件事情，其内部实现方式与上边的代码类似。

            .pipe(destination[, options])
                新增于: v0.9.4
                destination <stream.Writable> 数据写入目标
                options <Object> Pipe 选项
                end <boolean> 在 reader 结束时结束 writer 。默认为 true。
        (3) File System （文件系统）官方文档： http://nodejs.org/api/fs.html
            NodeJS通过fs内置模块提供对文件的操作。fs模块提供的API基本上可以分为以下三类：
            文件属性读写。
                其中常用的有fs.stat 、fs.chmod 、fs.chown 等等。

            文件内容读写。
                其中常用的有fs.readFile 、fs.readdir 、fs.writeFile 、fs.mkdir 等等。

            底层文件操作。
                其中常用的有fs.open 、fs.read 、fs.write 、fs.close 等等。
            
            NodeJS最精华的异步IO模型在fs模块里有着充分的体现，例如上边提到的这些API都通过回调函数传递结果。以fs.readFile为例：
            fs.readFile(pathname, function (err, data) {
                if (err) {
                    // Deal with error.
                } else {
                    // Deal with data.
                }
            });
            如上边代码所示，基本上所有fs模块API的回调参数都有两个。第一个参数在有错误发生时等于异常对象，第二个参数始终用于返回API方法执行结果。
            此外，fs模块的所有异步API都有对应的同步版本，用于无法使用异步操作时，或者同步操作更方便时的情况。
            同步API除了方法名的末尾多了一个Sync之外，异常对象与执行结果的传递方式也有相应变化。同样以fs.readFileSync为例：
            try {
                var data = fs.readFileSync(pathname);
                // Deal with data.
            } catch (err) {
                // Deal with error.
            }
            fs模块提供的API很多，这里不一一介绍，需要时请自行查阅官方文档。
        (3) Path        （路径）官方文档： http://nodejs.org/api/path.html
            操作文件时难免不与文件路径打交道。NodeJS提供了path内置模块来简化路径相关操作，并提升代码可读性。以下分别介绍几个常用的API。
            path.normalize 生成标准路径  [ˈnɔ:məlaɪz] 
                将传入的路径转换为标准路径，具体讲的话，除了解析路径中的.与..外，还能去掉多余的斜杠。
                如果有程序需要使用路径作为某些数据的索引，但又允许用户随意输入路径时，就需要使用该方法保证路径的唯一性。以下是一个例子：
                var cache = {};

                function store(key, value) {
                    cache[path.normalize(key)] = value;
                }

                store('foo/bar', 1);
                store('foo//baz//../bar', 2);
                console.log(cache);  // => { "foo/bar": 2 }
                
                坑出没注意： 标准化之后的路径里的斜杠在Windows系统下是\，而在Linux系统下是/。如果想保证任何系统下都使用/作为路径分隔符的话，需要用.replace(/\\/g, '/')再替换一下标准路径。
            
            path.join 拼接路径
                将传入的多个路径拼接为标准路径。该方法可避免手工拼接路径字符串的繁琐，并且能在不同系统下正确使用相应的路径分隔符。以下是一个例子：
                path.join('foo/', 'baz/', '../bar'); // => "foo/bar"
            path.extname 获取后缀名
                当我们需要根据不同文件扩展名做不同操作时，该方法就显得很好用。以下是一个例子：
                path.extname('foo/bar.js'); // => ".js"
            path模块提供的其余方法也不多，稍微看一下官方文档就能全部掌握。

    3、遍历目录
        遍历目录是操作文件时的一个常见需求。比如写一个程序，需要找到并处理指定目录下的所有JS文件时，就需要遍历整个目录。
        (1) 递归算法
            遍历目录时一般使用递归算法，否则就难以编写出简洁的代码。递归算法与数学归纳法类似，通过不断缩小问题的规模来解决问题。以下示例说明了这种方法。
            function factorial(n) {
                if (n === 1) {
                    return 1;
                } else {
                    return n * factorial(n - 1);
                }
            }
            上边的函数用于计算N的阶乘（N!）。可以看到，当N大于1时，问题简化为计算N乘以N-1的阶乘。当N等于1时，问题达到最小规模，不需要再简化，因此直接返回1。
            陷阱： 使用递归算法编写的代码虽然简洁，但由于每递归一次就产生一次函数调用，在需要优先考虑性能时，需要把递归算法转换为循环算法，以减少函数调用次数。
        (2) 遍历算法
            目录是一个树状结构，在遍历时一般使用深度优先+先序遍历算法。深度优先，意味着到达一个节点后，首先接着遍历子节点而不是邻居节点。
            先序遍历，意味着首次到达了某节点就算遍历完成，而不是最后一次返回某节点才算数。因此使用这种遍历方式时，下边这棵树的遍历顺序是A > B > D > E > C > F。

                     A
                    / \
                   B   C
                  / \   \
                 D   E   F
            同步遍历
                了解了必要的算法后，我们可以简单地实现以下目录遍历函数。
                function travel(dir, callback) {
                    fs.readdirSync(dir).forEach(function (file) {
                        var pathname = path.join(dir, file);

                        if (fs.statSync(pathname).isDirectory()) {
                            travel(pathname, callback);
                        } else {
                            callback(pathname);
                        }
                    });
                }
                可以看到，该函数以某个目录作为遍历的起点。遇到一个子目录时，就先接着遍历子目录。遇到一个文件时，就把文件的绝对路径传给回调函数。回调函数拿到文件路径后，就可以做各种判断和处理。
            异步遍历
                如果读取目录或读取文件状态时使用的是异步API，目录遍历函数实现起来会有些复杂，但原理完全相同。travel函数的异步版本如下。
                function travel(dir, callback, finish) {
                    fs.readdir(dir, function (err, files) {
                        (function next(i) {
                            if (i < files.length) {
                                var pathname = path.join(dir, files[i]);
                                fs.stat(pathname, function (err, stats) {
                                    if (stats.isDirectory()) {
                                        travel(pathname, callback, function () {
                                            next(i + 1);
                                        });
                                    } else {
                                        callback(pathname, function () {
                                            next(i + 1);
                                        });
                                    }
                                });
                            } else {
                                finish && finish();
                            }
                        }(0));
                    });
                }
                travel("../",function(pathname,func){
                    console.log(pathname);
                    func();
                },function(){
                    console.log("遍历完成");
                });
                闭包实现
                利用readdir读取所有子目录名
                读取完成进行回调，先检查第一项，利用path.join()得到当前的目录/文件名
                利用fs.stat()检测当前项是目录还是文件夹，是文件夹，以当前目录执行递归；是文件，检查第二项
                当一个目录中的所有项都被遍历后，返回上级目录，开始遍历上级目录的下一项。
                遍历完成：输出遍历完成。
                这里不详细介绍异步遍历函数的编写技巧，在后续章节中会详细介绍这个。总之我们可以看到异步编程还是蛮复杂的。
    4、文本编码
        使用NodeJS编写前端工具时，操作得最多的是文本文件，因此也就涉及到了文件编码的处理问题。我们常用的文本编码有UTF8和GBK两种，并且UTF8文件还可能带有BOM。
        在读取不同编码的文本文件时，需要将文件内容转换为JS使用的UTF8编码字符串后才能正常处理。
        (1) BOM的移除
            BOM用于标记一个文本文件使用Unicode编码，其本身是一个Unicode字符（"\uFEFF"），位于文本文件头部。在不同的Unicode编码下，BOM字符对应的二进制字节如下：

                Bytes      Encoding
            ----------------------------
                FE FF       UTF16BE
                FF FE       UTF16LE
                EF BB BF    UTF8

            因此，我们可以根据文本文件头几个字节等于啥来判断文件是否包含BOM，以及使用哪种Unicode编码。
            但是，BOM字符虽然起到了标记文件编码的作用，其本身却不属于文件内容的一部分，如果读取文本文件时不去掉BOM，在某些使用场景下就会有问题。
            例如我们把几个JS文件合并成一个文件后，如果文件中间含有BOM字符，就会导致浏览器JS语法错误。因此，使用NodeJS读取文本文件时，一般需要去掉BOM。
            例如，以下代码实现了识别和去除UTF8 BOM的功能。
                function readText(pathname) {
                    var bin = fs.readFileSync(pathname);
                    if (bin[0] === 0xEF && bin[1] === 0xBB && bin[2] === 0xBF) {
                        bin = bin.slice(3);
                    }
                    return bin.toString('utf-8');
                }
        (2) GBK 转 UTF8
            NodeJS支持在读取文本文件时，或者在Buffer转换为字符串时指定文本编码，但遗憾的是，GBK编码不在NodeJS自身支持范围内。
            因此，一般我们借助 iconv-lite 这个三方包来转换编码。使用NPM下载该包后，我们可以按下边方式编写一个读取GBK文本文件的函数。

            var iconv = require('iconv-lite');
            function readGBKText(pathname) {
                var bin = fs.readFileSync(pathname);
                return iconv.decode(bin, 'gbk');
            }
        (3) 单字节编码
            有时候，我们无法预知需要读取的文件采用哪种编码，因此也就无法指定正确的编码。比如我们要处理的某些CSS文件中，有的用GBK编码，有的用UTF8编码。
            虽然可以一定程度可以根据文件的字节内容猜测出文本编码，但这里要介绍的是有些局限，但是要简单得多的一种技术。

            首先我们知道，如果一个文本文件只包含英文字符，比如Hello World，那无论用GBK编码或是UTF8编码读取这个文件都是没问题的。
            这是因为在这些编码下，ASCII0~128范围内字符都使用相同的单字节编码。
            反过来讲，即使一个文本文件中有中文等字符，如果我们需要处理的字符仅在ASCII0~128范围内，比如除了注释和字符串以外的JS代码，
            我们就可以统一使用单字节编码来读取文件，不用关心文件的实际编码是GBK还是UTF8。
            以下示例说明了这种方法。

            1. GBK编码源文件内容：
                var foo = '中文';
            2. 对应字节：
                76 61 72 20 66 6F 6F 20 3D 20 27 D6 D0 CE C4 27 3B
            3. 使用单字节编码读取后得到的内容：
                var foo = '{乱码}{乱码}{乱码}{乱码}';
            4. 替换内容：
                var bar = '{乱码}{乱码}{乱码}{乱码}';
            5. 使用单字节编码保存后对应字节：
                76 61 72 20 62 61 72 20 3D 20 27 D6 D0 CE C4 27 3B
            6. 使用GBK编码读取后得到内容：
                var bar = '中文';
            这里的诀窍在于，不管大于0xEF的单个字节在单字节编码下被解析成什么乱码字符，使用同样的单字节编码保存这些乱码字符时，背后对应的字节保持不变。
            
            NodeJS中自带了一种binary编码可以用来实现这个方法，因此在下例中，我们使用这种编码来演示上例对应的代码该怎么写。
            function replace(pathname) {
                var str = fs.readFileSync(pathname, 'binary');
                str = str.replace('foo', 'bar');
                fs.writeFileSync(pathname, str, 'binary');
            }
    5、 小结
       本章介绍了使用NodeJS操作文件时需要的API以及一些技巧，总结起来有以下几点：
       学好文件操作，编写各种程序都不怕。
       如果不是很在意性能，fs模块的同步API能让生活更加美好。
       需要对文件读写做到字节级别的精细控制时，请使用fs模块的文件底层操作API。
       不要使用拼接字符串的方式来处理路径，使用path模块。
       掌握好目录遍历和文件编码处理技巧，很实用。
四、网络操作
    不了解网络编程的程序员不是好前端，而NodeJS恰好提供了一扇了解网络编程的窗口。
    通过NodeJS，除了可以编写一些服务端程序来协助前端开发和测试外，还能够学习一些HTTP协议与Socket协议的相关知识，这些知识在优化前端性能和排查前端故障时说不定能派上用场。
    本章将介绍与之相关的NodeJS内置模块。

    开门红
        NodeJS本来的用途是编写高性能Web服务器。我们首先在这里重复一下官方文档里的例子，使用NodeJS内置的http模块简单实现一个HTTP服务器。
        var http = require('http');
        http.createServer(function (request, response) {
            response.writeHead(200, { 'Content-Type': 'text-plain' });
            response.end('Hello World\n');
        }).listen(8124);
        以上程序创建了一个HTTP服务器并监听8124端口，打开浏览器访问该端口http://127.0.0.1:8124/就能够看到效果。
        豆知识： 在Linux系统下，监听1024以下端口需要root权限。因此，如果想监听80或443端口的话，需要使用sudo命令启动程序。   
    1、API走马观花
        我们先大致看看NodeJS提供了哪些和网络操作有关的API。这里并不逐一介绍每个API的使用方法，官方文档已经做得很好了。
        （1）HTTP 官方文档： http://nodejs.org/api/http.html
            http 模块提供两种使用方式：
            作为服务端使用时，创建一个HTTP服务器，监听HTTP客户端请求并返回响应。
            作为客户端使用时，发起一个HTTP客户端请求，获取服务端响应。
            首先我们来看看服务端模式下如何工作。如开门红中的例子所示，首先需要使用.createServer方法创建一个服务器，然后调用.listen方法监听端口。
            之后，每当来了一个客户端请求，创建服务器时传入的回调函数就被调用一次。可以看出，这是一种事件机制。
            
                HTTP请求本质上是一个数据流，由请求头（headers）和请求体（body）组成。例如以下是一个完整的HTTP请求数据内容。
                POST / HTTP/1.1
                User-Agent: curl/7.26.0
                Host: localhost
                Accept: */*
                Content-Length: 11
                Content-Type: application/x-www-form-urlencoded

                Hello World
                可以看到，空行之上是请求头，之下是请求体。HTTP请求在发送给服务器时，可以认为是按照从头到尾的顺序一个字节一个字节地以数据流方式发送的。
                而http模块创建的HTTP服务器在接收到完整的请求头后，就会调用回调函数。
                在回调函数中，除了可以使用request对象访问请求头数据外，还能把request对象当作一个只读数据流来访问请求体数据。以下是一个例子。
                http.createServer(function (request, response) {
                    var body = [];

                    console.log(request.method);
                    console.log(request.headers);

                    request.on('data', function (chunk) {
                        body.push(chunk);
                    });

                    request.on('end', function () {
                        body = Buffer.concat(body);
                        console.log(body.toString());
                    });
                }).listen(80);

                ------------------------------------
                POST
                { 'user-agent': 'curl/7.26.0',
                host: 'localhost',
                accept: '*/*',
                'content-length': '11',
                'content-type': 'application/x-www-form-urlencoded' }
                Hello World
            
                HTTP响应本质上也是一个数据流，同样由响应头（headers）和响应体（body）组成。例如以下是一个完整的HTTP请求数据内容。
                HTTP/1.1 200 OK
                Content-Type: text/plain
                Content-Length: 11
                Date: Tue, 05 Nov 2013 05:31:38 GMT
                Connection: keep-alive

                Hello World

                在回调函数中，除了可以使用response对象来写入响应头数据外，还能把response对象当作一个只写数据流来写入响应体数据。
                例如在以下例子中，服务端原样将客户端请求的请求体数据返回给客户端。
                http.createServer(function (request, response) {
                    response.writeHead(200, { 'Content-Type': 'text/plain' });

                    request.on('data', function (chunk) {
                        response.write(chunk);
                    });

                    request.on('end', function () {
                        response.end();
                    });
                }).listen(80);

            接下来我们看看客户端模式下如何工作。为了发起一个客户端HTTP请求，我们需要指定目标服务器的位置并发送请求头和请求体，以下示例演示了具体做法。
                var options = {
                    hostname: 'www.example.com',
                    port: 80,
                    path: '/upload',
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                };

                var request = http.request(options, function (response) {});
                request.write('Hello World');
                request.end();

                可以看到，.request方法创建了一个客户端，并指定请求目标和请求头数据。之后，就可以把request对象当作一个只写数据流来写入请求体数据和结束请求。
                另外，由于HTTP请求中GET请求是最常见的一种，并且不需要请求体，因此http模块也提供了以下便捷API。
                http.get('http://www.example.com/', function (response) {});

                当客户端发送请求并接收到完整的服务端响应头时，就会调用回调函数。
                在回调函数中，除了可以使用response对象访问响应头数据外，还能把response对象当作一个只读数据流来访问响应体数据。以下是一个例子。
                    http.get('http://www.example.com/', function (response) {
                        var body = [];

                        console.log(response.statusCode);
                        console.log(response.headers);

                        response.on('data', function (chunk) {
                            body.push(chunk);
                        });

                        response.on('end', function () {
                            body = Buffer.concat(body);
                            console.log(body.toString());
                        });
                    });

                    ------------------------------------
                    200
                    { 'content-type': 'text/html',
                    server: 'Apache',
                    'content-length': '801',
                    date: 'Tue, 05 Nov 2013 06:08:41 GMT',
                    connection: 'keep-alive' }
                    <!DOCTYPE html>
                    ...
        （2）HTTPS 官方文档： http://nodejs.org/api/https.html
            https模块与http模块极为类似，区别在于https模块需要额外处理SSL证书。
            在服务端模式下，创建一个HTTPS服务器的示例如下。
            var options = {
                    key: fs.readFileSync('./ssl/default.key'),
                    cert: fs.readFileSync('./ssl/default.cer')
                };

            var server = https.createServer(options, function (request, response) {
                    // ...
                });
            可以看到，与创建HTTP服务器相比，多了一个options对象，通过key和cert字段指定了HTTPS服务器使用的私钥和公钥。

            另外，NodeJS支持SNI技术，可以根据HTTPS客户端请求使用的域名动态使用不同的证书，因此同一个HTTPS服务器可以使用多个域名提供服务。
            接着上例，可以使用以下方法为HTTPS服务器添加多组证书。

            server.addContext('foo.com', {
                key: fs.readFileSync('./ssl/foo.com.key'),
                cert: fs.readFileSync('./ssl/foo.com.cer')
            });

            server.addContext('bar.com', {
                key: fs.readFileSync('./ssl/bar.com.key'),
                cert: fs.readFileSync('./ssl/bar.com.cer')
            });

            在客户端模式下，发起一个HTTPS客户端请求与http模块几乎相同，示例如下。
            var options = {
                    hostname: 'www.example.com',
                    port: 443,
                    path: '/',
                    method: 'GET'
                };
            var request = https.request(options, function (response) {});

            request.end();

            但如果目标服务器使用的SSL证书是自制的，不是从颁发机构购买的，默认情况下https模块会拒绝连接，提示说有证书安全问题。
            在options里加入rejectUnauthorized: false字段可以禁用对证书有效性的检查，从而允许https模块请求开发环境下使用自制证书的HTTPS服务器。

        （3）URL 官方文档： http://nodejs.org/api/url.html
            处理HTTP请求时url模块使用率超高，因为该模块允许解析URL、生成URL，以及拼接URL。首先我们来看看一个完整的URL的各组成部分。
                                       href
                -----------------------------------------------------------------
                                            host              path
                                    --------------- ----------------------------
                http: // user:pass @ host.com : 8080 /p/a/t/h ?query=string #hash
                -----    ---------   --------   ---- -------- ------------- -----
                protocol     auth     hostname   port pathname     search     hash
                                                                ------------
                                                                query
                我们可以使用.parse方法来将一个URL字符串转换为URL对象，示例如下。

                url.parse('http://user:pass@host.com:8080/p/a/t/h?query=string#hash');
                /* =>
                { protocol: 'http:',
                auth: 'user:pass',
                host: 'host.com:8080',
                port: '8080',
                hostname: 'host.com',
                hash: '#hash',
                search: '?query=string',
                query: 'query=string',
                pathname: '/p/a/t/h',
                path: '/p/a/t/h?query=string',
                href: 'http://user:pass@host.com:8080/p/a/t/h?query=string#hash' }
                */
                传给.parse方法的不一定要是一个完整的URL，例如在HTTP服务器回调函数中，request.url不包含协议头和域名，但同样可以用.parse方法解析。 可以看pathname
            .parse方法还支持第二个和第三个布尔类型可选参数。
            第二个参数等于true时，该方法返回的URL对象中，query字段不再是一个字符串，而是一个经过querystring模块转换后的参数对象。
            第三个参数等于true时，该方法可以正确解析不带协议头的URL，例如//www.example.com/foo/bar。

            反过来， format 方法允许将一个URL对象转换为URL字符串，示例如下。
            url.format({
                protocol: 'http:',
                host: 'www.example.com',
                pathname: '/p/a/t/h',
                search: 'query=string'
            });
            /* =>
            'http://www.example.com/p/a/t/h?query=string'
            */

            另外，.resolve方法可以用于拼接URL，示例如下。
            url.resolve('http://www.example.com/foo/bar', '../baz');
            /* =>
            http://www.example.com/baz
            */
        （4）Query String 官方文档： http://nodejs.org/api/querystring.html
            querystring模块用于实现URL参数字符串与参数对象的互相转换，示例如下。
            querystring.parse('foo=bar&baz=qux&baz=quux&corge');
            /* =>
            { foo: 'bar', baz: ['qux', 'quux'], corge: '' }
            */

            querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });
            /* =>
            'foo=bar&baz=qux&baz=quux&corge='
            */
        （5）Zlib 官方文档： http://nodejs.org/api/zlib.html
            zlib模块提供了数据压缩和解压的功能。当我们处理HTTP请求和响应时，可能需要用到这个模块。
            首先我们看一个使用zlib模块压缩HTTP响应体数据的例子。这个例子中，判断了客户端是否支持gzip，并在支持的情况下使用zlib模块返回gzip之后的响应体数据。
            http.createServer(function (request, response) {
                var i = 1024,
                    data = '';

                while (i--) {
                    data += '.';
                }

                if ((request.headers['accept-encoding'] || '').indexOf('gzip') !== -1) {
                    zlib.gzip(data, function (err, data) {
                        response.writeHead(200, {
                            'Content-Type': 'text/plain',
                            'Content-Encoding': 'gzip'
                        });
                        response.end(data);
                    });
                } else {
                    response.writeHead(200, {
                        'Content-Type': 'text/plain'
                    });
                    response.end(data);
                }
            }).listen(80);

            接着我们看一个使用zlib模块解压HTTP响应体数据的例子。这个例子中，判断了服务端响应是否使用gzip压缩，并在压缩的情况下使用zlib模块解压响应体数据。
            var options = {
                hostname: 'www.example.com',
                port: 80,
                path: '/',
                method: 'GET',
                headers: {
                    'Accept-Encoding': 'gzip, deflate'
                }
            };

            http.request(options, function (response) {
                var body = [];

                response.on('data', function (chunk) {
                    body.push(chunk);
                });

                response.on('end', function () {
                    body = Buffer.concat(body);

                    if (response.headers['content-encoding'] === 'gzip') {
                        zlib.gunzip(body, function (err, data) {
                            console.log(data.toString());
                        });
                    } else {
                        console.log(data.toString());
                    }
                });
            }).end();
        （6）Net 官方文档： http://nodejs.org/api/net.html
            net模块可用于创建Socket服务器或Socket客户端。
            由于Socket在前端领域的使用范围还不是很广，这里先不涉及到WebSocket的介绍，仅仅简单演示一下如何从Socket层面来实现HTTP请求和响应。

            首先我们来看一个使用Socket搭建一个很不严谨的HTTP服务器的例子。这个HTTP服务器不管收到啥请求，都固定返回相同的响应。
            net.createServer(function (conn) {
                conn.on('data', function (data) {
                    conn.write([
                        'HTTP/1.1 200 OK',
                        'Content-Type: text/plain',
                        'Content-Length: 11',
                        '',
                        'Hello World'
                    ].join('\n'));
                });
            }).listen(80);
            接着我们来看一个使用Socket发起HTTP客户端请求的例子。这个例子中，Socket客户端在建立连接后发送了一个HTTP GET请求，并通过data事件监听函数来获取服务器响应。
            var options = {
                    port: 80,
                    host: 'www.example.com'
                };

            var client = net.connect(options, function () {
                    client.write([
                        'GET / HTTP/1.1',
                        'User-Agent: curl/7.26.0',
                        'Host: www.baidu.com',
                        'Accept: */*',
                        '',
                        ''
                    ].join('\n'));
                });

            client.on('data', function (data) {
                console.log(data.toString());
                client.end();
            });
            
            你可以把 WebSocket 看成是 HTTP 协议为了支持长连接所打的一个大补丁，它和 HTTP 有一些共性，是为了解决 HTTP 本身无法解决的某些问题而做出的一个改良设计。
            在以前 HTTP 协议中所谓的 keep-alive connection 是指在一次 TCP 连接中完成多个 HTTP 请求，但是对每个请求仍然要单独发 header；
            所谓的 polling 是指从客户端（一般就是浏览器）不断主动的向服务器发 HTTP 请求查询是否有新数据。
            这两种模式有一个共同的缺点，就是除了真正的数据部分外，服务器和客户端还要大量交换 HTTP header，信息交换效率很低。它们建立的“长连接”都是伪.长连接，
            只不过好处是不需要对现有的 HTTP server 和浏览器架构做修改就能实现。WebSocket 解决的第一个问题是，通过第一个 HTTP request 建立了 TCP 连接之后，
            之后的交换数据都不需要再发 HTTP request了，使得这个长连接变成了一个真.长连接。但是不需要发送 HTTP header就能交换数据显然和原有的 HTTP 协议是有区别的，
            所以它需要对服务器和客户端都进行升级才能实现。在此基础上 WebSocket 还是一个双通道的连接，在同一个 TCP 连接上既可以发也可以收信息。
            此外还有 multiplexing 功能，几个不同的 URI 可以复用同一个 WebSocket 连接。这些都是原来的 HTTP 不能做到的。
            另外说一点技术细节，因为看到有人提问 WebSocket 可能进入某种半死不活的状态。这实际上也是原有网络世界的一些缺陷性设计。
            上面所说的 WebSocket 真.长连接虽然解决了服务器和客户端两边的问题，但坑爹的是网络应用除了服务器和客户端之外，另一个巨大的存在是中间的网络链路。
            一个 HTTP/WebSocket 连接往往要经过无数的路由，防火墙。你以为你的数据是在一个“连接”中发送的，实际上它要跨越千山万水，经过无数次转发，过滤，才能最终抵达终点。
            在这过程中，中间节点的处理方法很可能会让你意想不到。比如说，这些坑爹的中间节点可能会认为一份连接在一段时间内没有数据发送就等于失效，它们会自作主张的切断这些连接。
            在这种情况下，不论服务器还是客户端都不会收到任何提示，它们只会一厢情愿的以为彼此间的红线还在，徒劳地一边又一边地发送抵达不了彼岸的信息。
            而计算机网络协议栈的实现中又会有一层套一层的缓存，除非填满这些缓存，你的程序根本不会发现任何错误。
            这样，本来一个美好的 WebSocket 长连接，就可能在毫不知情的情况下进入了半死不活状态。而解决方案，WebSocket 的设计者们也早已想过。
            就是让服务器和客户端能够发送 Ping/Pong Frame（RFC 6455 - The WebSocket Protocol）。
            这种 Frame 是一种特殊的数据包，它只包含一些元数据而不需要真正的 Data Payload，可以在不影响 Application 的情况下维持住中间网络的连接状态。
    2、灵机一点
        使用NodeJS操作网络，特别是操作HTTP请求和响应时会遇到一些惊喜，这里对一些常见问题做解答。

        问： 为什么通过headers对象访问到的HTTP请求头或响应头字段不是驼峰的？
        答： 从规范上讲，HTTP请求头和响应头字段都应该是驼峰的。但现实是残酷的，不是每个HTTP服务端或客户端程序都严格遵循规范，
        所以NodeJS在处理从别的客户端或服务端收到的头字段时，都统一地转换为了小写字母格式，以便开发者能使用统一的方式来访问头字段，例如headers['content-length']。

        问： 为什么http模块创建的HTTP服务器返回的响应是chunked传输方式的？
        答： 因为默认情况下，使用.writeHead方法写入响应头后，允许使用.write方法写入任意长度的响应体数据，并使用.end方法结束一个响应。
        由于响应体数据长度不确定，因此NodeJS自动在响应头里添加了Transfer-Encoding: chunked字段，并采用chunked传输方式。
        但是当响应体数据长度确定时，可使用.writeHead方法在响应头里加上Content-Length字段，这样做之后NodeJS就不会自动添加Transfer-Encoding字段和使用chunked传输方式。

        问： 为什么使用http模块发起HTTP客户端请求时，有时候会发生socket hang up错误？
        答： 发起客户端HTTP请求前需要先创建一个客户端。http模块提供了一个全局客户端http.globalAgent，可以让我们使用.request或.get方法时不用手动创建客户端。
        但是全局客户端默认只允许5个并发Socket连接，当某一个时刻HTTP客户端请求创建过多，超过这个数字时，就会发生socket hang up错误。
        解决方法也很简单，通过http.globalAgent.maxSockets属性把这个数字改大些即可。另外，https模块遇到这个问题时也一样通过https.globalAgent.maxSockets属性来处理。

    3、小结
        本章介绍了使用NodeJS操作网络时需要的API以及一些坑回避技巧，总结起来有以下几点：

        http和https模块支持服务端模式和客户端模式两种使用方式。
        request和response对象除了用于读写头数据外，都可以当作数据流来操作。
        url.parse方法加上request.url属性是处理HTTP请求时的固定搭配。
        使用zlib模块可以减少使用HTTP协议时的数据传输量。
        通过net模块的 Socket 服务器与客户端可对HTTP协议做底层操作。
        小心踩坑。
五、进程管理
    NodeJS可以感知和控制自身进程的运行环境和状态，也可以创建子进程并与其协同工作，这使得NodeJS可以把多个程序组合在一起共同完成某项工作，并在其中充当胶水和调度器的作用。
    本章除了介绍与之相关的NodeJS内置模块外，还会重点介绍典型的使用场景。
    开门红
        我们已经知道了NodeJS自带的fs模块比较基础，把一个目录里的所有文件和子目录都拷贝到另一个目录里需要写不少代码。
        另外我们也知道，终端下的cp命令比较好用，一条cp -r source/* target命令就能搞定目录拷贝。
        那我们首先看看如何使用NodeJS调用终端命令来简化目录拷贝，示例代码如下：

        var child_process = require('child_process');
        var util = require('util');

        function copy(source, target, callback) {
            child_process.exec(
                util.format('cp -r %s/* %s', source, target), callback);
        }

        copy('a', 'b', function (err) {
            // ...
        });
        从以上代码中可以看到，子进程是异步运行的，通过回调函数返回执行结果。

    1、API走马观花
        我们先大致看看NodeJS提供了哪些和进程管理有关的API。这里并不逐一介绍每个API的使用方法，官方文档已经做得很好了。

        （1） Process [ˈprəʊses] 进程 官方文档： http://nodejs.org/api/process.html
            任何一个进程都有启动进程时使用的命令行参数，有标准输入标准输出，有运行权限，有运行环境和运行状态。
            在NodeJS中，可以通过 process 对象感知和控制NodeJS自身进程的方方面面。
            另外需要注意的是，process 不是内置模块，而是一个全局对象，因此在任何地方都可以直接使用。

        （2） Child Process 官方文档： http://nodejs.org/api/child_process.html
            使用child_process模块可以创建和控制子进程。该模块提供的API中最核心的是.spawn，其余API都是针对特定使用场景对它的进一步封装，算是一种语法糖。
        
        （3） Cluster 官方文档： http://nodejs.org/api/cluster.html
            cluster模块是对 child_process 模块的进一步封装，专用于解决单进程NodeJS Web服务器无法充分利用多核CPU的问题。
            使用该模块可以简化多进程服务器程序的开发，让每个核上运行一个工作进程，并统一通过主进程监听端口和分发请求。
        （4）node Util 模块
                util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。
                该util模块主要设计用于支持Node.js自己的内部API的需求。但是，许多实用程序对于应用程序和模块开发人员也很有用。它可以通过以下方式访问：
                const util = require('util');
                util.callbackify （原始）
                    接受一个async函数（或者返回一个Promise的函数），并返回一个遵循错误优先回调风格的函数，即将(err, value) => ...回调作为最后一个参数。
                    在回调中，第一个参数将是拒绝原因（或者null如果Promise已解决），第二个参数将是已解析的值。

                    const util = require('util');
                    async function fn() {
                        return 'hello world';
                    }
                    const callbackFunction = util.callbackify(fn);
                    
                    callbackFunction((err, ret) => {
                        if (err) throw err;
                        console.log(ret);
                    });
                    将打印：hello world
                    注意：回调是异步执行的，并且会有一个有限的堆栈跟踪。如果回调抛出，进程将发出一个'uncaughtException' 事件，如果不处理则退出。
                    由于null具有特殊含义作为回调的第一个参数，因此如果包装函数拒绝Promise带有虚假值的a作为原因，则该值将被包装在一个Error存储在名为的字段中的原始值中 reason。

                util.debuglog
                    该util.debuglog()方法用于创建一个函数，该函数 stderr 根据 NODE_DEBUG 环境变量的存在有条件地写入调试消息。
                    如果该 section 名称出现在该环境变量的值内，则返回的函数的操作类似于 console.error()。如果不是，则返回的函数是空操作。

                    const util = require('util');
                    const debuglog = util.debuglog('foo');
                    debuglog('hello from foo [%d]', 123);
                    如果该程序NODE_DEBUG=foo在环境中运行，那么它将输出如下所示的内容：
                    FOO 3245: hello from foo [123]

                util.deprecate（函数，字符串）
                    该util.deprecate()方法将给定function或类包装为标记为已弃用的方式。

                util.format（格式[，... args]）
                    该util.format()方法返回格式化的字符串，使用第一个参数作为一个类似printf的格式。

                    第一个参数是一个包含零个或多个占位符标记的字符串。每个占位符令牌均由来自相应参数的转换后的值替换。支持的占位符是：

                    %s - 字符串。
                    %d - 数字（整数或浮点值）。
                    %i - 整数。
                    %f - 浮点值。
                    %j - JSON。'[Circular]'如果参数包含循环引用，则替换为字符串。
                    %o - 对象。具有通用JavaScript对象格式的对象的字符串表示形式。类似于util.inspect()选项{ showHidden: true, depth: 4, showProxy: true }。这将显示完整的对象，包括不可枚举的符号和属性。
                    %O - 对象。具有通用JavaScript对象格式的对象的字符串表示形式。类似于util.inspect()没有选项。这将显示不包含不可枚举符号和属性的完整对象。
                    %%- 单个百分号（'%'）。这不会消耗一个参数。
                    如果占位符没有相应的参数，则占位符不会被替换。

                    util.format('%s:%s', 'foo');
                    // Returns: 'foo:%s'
                    　　如果传递给util.format()方法的参数比占位符的数量多，则额外的参数将被强制转换为字符串，然后连接到返回的字符串，每个字符串都由空格分隔。
                        过度的参数 typeof是'object'或'symbol'（除外null）将被转换util.inspect()。

                    util.format('%s:%s', 'foo', 'bar', 'baz'); // 'foo:bar baz'
                    如果第一个参数不是一个字符串，则util.format()返回一个字符串，它是由空格分隔的所有参数的连接。每个参数都被转换为一个字符串util.inspect()

                    
                    util.format(1, 2, 3); // '1 2 3'
                    　　如果只传递一个参数util.format()，则返回原样而没有任何格式。

                    util.format('%% %s'); // '%% %s'
                util.inherits:  只继承原型伤的东西
                    util.inherits(constructor,superConstructor).这个是node包装好的用于实现继承的方法。在javascript中的继承和java中的不太一样。
                    开发指南中对它的解释挺有意思:"基于类的语言中类就像一个模具，对象有这个模具浇注产生，而基于原型的语言中，原想就好像一件艺术品的原件，我们通过以太100%精确的机器把这个原件复制出很多分"
                    Node包装好的这个继承只能继承父类中在原型中定义的函数：
                    var util = require('util');
 
                    function Base() {
                        this.name = 'base';
                        this.base = 1991;
                        
                        this.sayHello = function() {
                            console.log('Hello ' + this.name);
                        };
                    }
                    Base.prototype.showName = function() {
                        console.log(this.name);
                    };

                    function Sub() {
                        this.name = 'sub';
                    }
                    
                    util.inherits(Sub, Base);
                    var objBase = new Base();
                    objBase.showName();             //base
                    objBase.sayHello();              //Hello base
                    console.log(objBase);           //Base { name: 'base', base: 1991, sayHello: [Function] }
                    
                    var objSub = new Sub();
                    objSub.showName();          //sub
                    //objSub.sayHello();         //  objSub.sayHello is not a function
                    console.log(objSub);        // Sub { name: 'sub' }
                Util.inspect
                    在我理解看来，这个方法有点像java里面的toString()

                    Util.inspect(Object,[shouHidden],[depth],[colors])

                    Object:既要转换的对象
                    showHidden:如果设置为true，相识更多隐藏信息
                    depth:表示最大递归的层数。如果不指定，默认递归两层。指定为null，不限制层数的递归
                    color:用于显示颜色
    2、应用场景
        和进程管理相关的API单独介绍起来比较枯燥，因此这里从一些典型的应用场景出发，分别介绍一些重要API的使用方法。

        （1）如何获取命令行参数
            在NodeJS中可以通过process.argv获取命令行参数。
            但是比较意外的是，node执行程序路径和主模块文件路径固定占据了argv[0]和argv[1]两个位置，而第一个命令行参数从argv[2]开始。
            为了让argv使用起来更加自然，可以按照以下方式处理。
            function main(argv) {
                // ...
            }
            main(process.argv.slice(2));
        （2）如何退出程序
            通常一个程序做完所有事情后就正常退出了，这时程序的退出状态码为0。或者一个程序运行时发生了异常后就挂了，这时程序的退出状态码不等于0。
            如果我们在代码中捕获了某个异常，但是觉得程序不应该继续运行下去，需要立即退出，并且需要把退出状态码设置为指定数字，比如1，就可以按照以下方式：

            try {
                // ...
            } catch (err) {
                // ...
                process.exit(1);
            }
        （3）如何控制输入输出
            NodeJS程序的标准输入流（stdin）、一个标准输出流（stdout）、一个标准错误流（stderr）分别对应process.stdin、process.stdout和process.stderr，
            第一个是只读数据流，后边两个是只写数据流，对它们的操作按照对数据流的操作方式即可。例如，console.log可以按照以下方式实现。
            function log() {
                process.stdout.write(
                    util.format.apply(util, arguments) + '\n');
            }
        （4）如何降权
            在Linux系统下，我们知道需要使用root权限才能监听1024以下端口。但是一旦完成端口监听后，继续让程序运行在root权限下存在安全隐患，因此最好能把权限降下来。
            以下是这样一个例子。
            http.createServer(callback).listen(80, function () {
                var env = process.env,
                    uid = parseInt(env['SUDO_UID'] || process.getuid(), 10),
                    gid = parseInt(env['SUDO_GID'] || process.getgid(), 10);

                process.setgid(gid);
                process.setuid(uid);
            });
            上例中有几点需要注意：
            如果是通过sudo获取root权限的，运行程序的用户的UID和GID保存在环境变量 SUDO_UID 和 SUDO_GID 里边。
            如果是通过chmod +s方式获取root权限的，运行程序的用户的UID和GID可直接通过process.getuid和process.getgid方法获取。

            process.setuid 和 process.setgid 方法只接受number类型的参数。
            
        （5）如何创建子进程
            以下是一个创建NodeJS子进程的例子。
            在node中，child_process这个模块非常重要。掌握了它，等于在node的世界开启了一扇新的大门。熟悉shell脚本的同学，可以用它来完成很多有意思的事情，比如文件压缩、增量部署等

            var child = child_process.spawn('node', [ 'xxx.js' ]);

            child.stdout.on('data', function (data) {
                console.log('stdout: ' + data);
            });

            child.stderr.on('data', function (data) {
                console.log('stderr: ' + data);
            });

            child.on('close', function (code) {
                console.log('child process exited with code ' + code);
            });

            上例中使用了.spawn(exec, args, options)方法，该方法支持三个参数。
            第一个参数是执行文件路径，可以是执行文件的相对或绝对路径，也可以是根据PATH环境变量能找到的执行文件名。
            第二个参数中，数组中的每个成员都按顺序对应一个命令行参数。
            第三个参数可选，用于配置子进程的执行环境与行为。

            另外，上例中虽然通过子进程对象的 .stdout 和 .stderr 访问子进程的输出，
            但通过 options.stdio 字段的不同配置，可以将子进程的输入输出重定向到任何数据流上，或者让子进程共享父进程的标准输入输出流，或者直接忽略子进程的输入输出。

        （6）进程间如何通讯
            在Linux系统下，进程之间可以通过信号互相通信。以下是一个例子。

                /* parent.js */
                var child = child_process.spawn('node', [ 'child.js' ]);

                child.kill('SIGTERM');

                /* child.js */
                process.on('SIGTERM', function () {
                    cleanUp();
                    process.exit(0);
                });
            在上例中，父进程通过.kill方法向子进程发送SIGTERM信号，子进程监听process对象的SIGTERM事件响应信号。
            不要被.kill方法的名称迷惑了，该方法本质上是用来给进程发送信号的，进程收到信号后具体要做啥，完全取决于信号的种类和进程自身的代码。

            另外，如果父子进程都是NodeJS进程，就可以通过 IPC（进程间通讯）双向传递数据。以下是一个例子。
                /* parent.js */
                var child = child_process.spawn('node', [ 'child.js' ], {
                        stdio: [ 0, 1, 2, 'ipc' ]
                    });

                child.on('message', function (msg) {
                    console.log(msg);
                });

                child.send({ hello: 'hello' });

                /* child.js */
                process.on('message', function (msg) {
                    msg.hello = msg.hello.toUpperCase();
                    process.send(msg);
                });
            可以看到，父进程在创建子进程时，在options.stdio 字段中通过ipc开启了一条IPC通道，之后就可以监听子进程对象的message事件接收来自子进程的消息，
            并通过.send方法给子进程发送消息。在子进程这边，可以在process对象上监听message事件接收来自父进程的消息，并通过.send方法向父进程发送消息。
            数据在传递过程中，会先在发送端使用JSON.stringify方法序列化，再在接收端使用JSON.parse方法反序列化。

        （7）如何守护子进程
            守护进程一般用于监控工作进程的运行状态，在工作进程不正常退出时重启工作进程，保障工作进程不间断运行。以下是一种实现方式。

            /* daemon.js */
            function spawn(mainModule) {
                var worker = child_process.spawn('node', [ mainModule ]);

                worker.on('exit', function (code) {
                    if (code !== 0) {
                        spawn(mainModule);
                    }
                });
            }

            spawn('worker.js');
            可以看到，工作进程非正常退出时，守护进程立即重启工作进程。
    小结
        本章介绍了使用NodeJS管理进程时需要的API以及主要的应用场景，总结起来有以下几点：
            使用process对象管理自身。
             使用child_process模块创建和管理子进程。

六、异步编程
    NodeJS最大的卖点——事件机制和异步IO，对开发者并不是透明的。开发者需要按异步方式编写代码才用得上这个卖点，而这一点也遭到了一些NodeJS反对者的抨击。
    但不管怎样，异步编程确实是NodeJS最大的特点，没有掌握异步编程就不能说是真正学会了NodeJS。本章将介绍与异步编程相关的各种知识。
    1、回调
        在代码中，异步编程的直接体现就是回调。异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。我们首先可以看看以下代码。
            function heavyCompute(n, callback) {
                var count = 0,
                    i, j;

                for (i = n; i > 0; --i) {
                    for (j = n; j > 0; --j) {
                        count += 1;
                    }
                }

                callback(count);
            }

            heavyCompute(10000, function (count) {
                console.log(count);
            });

            console.log('hello');

            -- Console ------------------------------
            100000000
            hello
        可以看到，本来应该在1秒后被调用的回调函数因为JS主线程忙于运行其它代码，实际执行时间被大幅延迟。
    2、代码设计模式
        异步编程有很多特有的代码设计模式，为了实现同样的功能，使用同步方式和异步方式编写的代码会有很大差异。以下分别介绍一些常见的模式。
        函数返回值
            使用一个函数的输出作为另一个函数的输入是很常见的需求，在同步方式下一般按以下方式编写代码：

            var output = fn1(fn2('input'));
            // Do something.
            而在异步方式下，由于函数执行结果不是通过返回值，而是通过回调函数传递，因此一般按以下方式编写代码：

            fn2('input', function (output2) {
                fn1(output2, function (output1) {
                    // Do something.
                });
            });
            可以看到，这种方式就是一个回调函数套一个回调函多，套得太多了很容易写出>形状的代码。
            
        遍历数组
            在遍历数组时，使用某个函数依次对数据成员做一些处理也是常见的需求。如果函数是同步执行的，一般就会写出以下代码：

            var len = arr.length,
                i = 0;

            for (; i < len; ++i) {
                arr[i] = sync(arr[i]);
            }

            // All array items have processed.

            如果函数是异步执行的，以上代码就无法保证循环结束后所有数组成员都处理完毕了。如果数组成员必须一个接一个串行处理，则一般按照以下方式编写异步代码：
                (function next(i, len, callback) {
                    if (i < len) {
                        async(arr[i], function (value) {
                            arr[i] = value;
                            next(i + 1, len, callback);
                        });
                    } else {
                        callback();
                    }
                }(0, arr.length, function () {
                    // All array items have processed.
                }));
            可以看到，以上代码在异步函数执行一次并返回执行结果后才传入下一个数组成员并开始下一轮执行，直到所有数组成员处理完毕后，通过回调的方式触发后续代码的执行。

            如果数组成员可以并行处理，但后续代码仍然需要所有数组成员处理完毕后才能执行的话，则异步代码会调整成以下形式：
                (function (i, len, count, callback) {
                    for (; i < len; ++i) {
                        (function (i) {
                            async(arr[i], function (value) {
                                arr[i] = value;
                                if (++count === len) {
                                    callback();
                                }
                            });
                        }(i));
                    }
                }(0, arr.length, 0, function () {
                    // All array items have processed.
                }));
            可以看到，与异步串行遍历的版本相比，以上代码并行处理所有数组成员，并通过计数器变量来判断什么时候所有数组成员都处理完毕了。

        异常处理
            JS自身提供的异常捕获和处理机制——try..catch..，只能用于同步执行的代码。以下是一个例子。
                function sync(fn) {
                    return fn();
                }

                try {
                    sync(null);
                    // Do something.
                } catch (err) {
                    console.log('Error: %s', err.message);
                }

                -- Console ------------------------------
                Error: object is not a function

            可以看到，异常会沿着代码执行路径一直冒泡，直到遇到第一个try语句时被捕获住。
            但由于异步函数会打断代码执行路径，异步函数执行过程中以及执行之后产生的异常冒泡到执行路径被打断的位置时，如果一直没有遇到try语句，就作为一个全局异常抛出。
            1、以下是一个例子。
                function async(fn, callback) {
                    // Code execution path breaks here.
                    setTimeout(function ()　{
                        callback(fn());
                    }, 0);
                }

                try {
                    async(null, function (data) {
                        // Do something.
                    });
                } catch (err) {
                    console.log('Error: %s', err.message);
                }

                -- Console ------------------------------
                /home/user/test.js:4
                        callback(fn());
                                ^
                TypeError: object is not a function
                    at null._onTimeout (/home/user/test.js:4:13)
                    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)

            2、因为代码执行路径被打断了，我们就需要在异常冒泡到断点之前用try语句把异常捕获住，并通过回调函数传递被捕获的异常。于是我们可以像下边这样改造上边的例子。
                function async(fn, callback) {
                    // Code execution path breaks here.
                    setTimeout(function ()　{
                        try {
                            callback(null, fn());
                        } catch (err) {
                            callback(err);
                        }
                    }, 0);
                }

                async(null, function (err, data) {
                    if (err) {
                        console.log('Error: %s', err.message);
                    } else {
                        // Do something.
                    }
                });

                -- Console ------------------------------
                Error: object is not a function
            3、可以看到，异常再次被捕获住了。在NodeJS中，几乎所有异步API都按照以上方式设计，回调函数中第一个参数都是err。
                因此我们在编写自己的异步函数时，也可以按照这种方式来处理异常，与NodeJS的设计风格保持一致。
                有了异常处理方式后，我们接着可以想一想一般我们是怎么写代码的。
                基本上，我们的代码都是做一些事情，然后调用一个函数，然后再做一些事情，然后再调用一个函数，如此循环。
                如果我们写的是同步代码，只需要在代码入口点写一个try语句就能捕获所有冒泡上来的异常，示例如下。
                function main() {
                    // Do something.
                    syncA();
                    // Do something.
                    syncB();
                    // Do something.
                    syncC();
                }

                try {
                    main();
                } catch (err) {
                    // Deal with exception.
                }

            4、但是，如果我们写的是异步代码，就只有呵呵了。
                由于每次异步函数调用都会打断代码执行路径，只能通过回调函数来传递异常，于是我们就需要在每个回调函数里判断是否有异常发生，于是只用三次异步函数调用，就会产生下边这种代码。
                function main(callback) {
                    // Do something.
                    asyncA(function (err, data) {
                        if (err) {
                            callback(err);
                        } else {
                            // Do something
                            asyncB(function (err, data) {
                                if (err) {
                                    callback(err);
                                } else {
                                    // Do something
                                    asyncC(function (err, data) {
                                        if (err) {
                                            callback(err);
                                        } else {
                                            // Do something
                                            callback(null);
                                        }
                                    });
                                }
                            });
                        }
                    });
                }

                main(function (err) {
                    if (err) {
                        // Deal with exception.
                    }
                });
            
            5、可以看到，回调函数已经让代码变得复杂了，而异步方式下对异常的处理更加剧了代码的复杂度。如果NodeJS的最大卖点最后变成这个样子，那就没人愿意用NodeJS了，
                因此接下来会介绍NodeJS提供的一些解决方案。
                域（Domain） 官方文档： http://nodejs.org/api/domain.html
                    NodeJS提供了domain模块，可以简化异步代码的异常处理。在介绍该模块之前，我们需要首先理解“域”的概念。
                    简单的讲，一个域就是一个JS运行环境，在一个运行环境中，如果一个异常没有被捕获，将作为一个全局异常被抛出。
                    NodeJS通过process对象提供了捕获全局异常的方法，示例代码如下

                    process.on('uncaughtException', function (err) {
                        console.log('Error: %s', err.message);
                    });

                    setTimeout(function (fn) {
                        fn();
                    });

                    -- Console ------------------------------
                    Error: undefined is not a function
                虽然全局异常有个地方可以捕获了，但是对于大多数异常，我们希望尽早捕获，并根据结果决定代码的执行路径。我们用以下HTTP服务器代码作为例子：
                    function async(request, callback) {
                        // Do something.
                        asyncA(request, function (err, data) {
                            if (err) {
                                callback(err);
                            } else {
                                // Do something
                                asyncB(request, function (err, data) {
                                    if (err) {
                                        callback(err);
                                    } else {
                                        // Do something
                                        asyncC(request, function (err, data) {
                                            if (err) {
                                                callback(err);
                                            } else {
                                                // Do something
                                                callback(null, data);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }

                    http.createServer(function (request, response) {
                        async(request, function (err, data) {
                            if (err) {
                                response.writeHead(500);
                                response.end();
                            } else {
                                response.writeHead(200);
                                response.end(data);
                            }
                        });
                    });
                以上代码将请求对象交给异步函数处理后，再根据处理结果返回响应。这里采用了使用回调函数传递异常的方案，因此async函数内部如果再多几个异步函数调用的话，
                代码就变成上边这副鬼样子了。为了让代码好看点，我们可以在每处理一个请求时，使用domain模块创建一个子域（JS子运行环境）。
                在子域内运行的代码可以随意抛出异常，而这些异常可以通过子域对象的error事件统一捕获。于是以上代码可以做如下改造：
                    function async(request, callback) {
                        // Do something.
                        asyncA(request, function (data) {
                            // Do something
                            asyncB(request, function (data) {
                                // Do something
                                asyncC(request, function (data) {
                                    // Do something
                                    callback(data);
                                });
                            });
                        });
                    }

                    http.createServer(function (request, response) {
                        var d = domain.create();

                        d.on('error', function () {
                            response.writeHead(500);
                            response.end();
                        });

                        d.run(function () {
                            async(request, function (data) {
                                response.writeHead(200);
                                response.end(data);
                            });
                        });
                    });
                可以看到，我们使用 .create 方法创建了一个子域对象，并通过 .run 方法进入需要在子域中运行的代码的入口点。
                而位于子域中的异步函数回调函数由于不再需要捕获异常，代码一下子瘦身很多。

                陷阱
                    无论是通过 process 对象的 uncaughtException 事件捕获到全局异常，还是通过子域对象的error事件捕获到了子域异常，
                    在NodeJS官方文档里都强烈建议处理完异常后立即重启程序，而不是让程序继续运行。
                    按照官方文档的说法，发生异常后的程序处于一个不确定的运行状态，如果不立即退出的话，程序可能会发生严重内存泄漏，也可能表现得很奇怪。

                    但这里需要澄清一些事实。JS本身的throw..try..catch异常处理机制并不会导致内存泄漏，也不会让程序的执行结果出乎意料，但NodeJS并不是存粹的JS。
                    NodeJS里大量的API内部是用C/C++实现的，因此NodeJS程序的运行过程中，代码执行路径穿梭于JS引擎内部和外部，
                    而JS的异常抛出机制可能会打断正常的代码执行流程，导致C/C++部分的代码表现异常，进而导致内存泄漏等问题。

                    因此，使用uncaughtException或domain捕获异常，代码执行路径里涉及到了C/C++部分的代码时，
                    如果不能确定是否会导致内存泄漏等问题，最好在处理完异常后重启程序比较妥当。而使用try语句捕获异常时一般捕获到的都是JS本身的异常，不用担心上诉问题。
        小结
            本章介绍了JS异步编程相关的知识，总结起来有以下几点：
            不掌握异步编程就不算学会NodeJS。
            异步编程依托于回调来实现，而使用回调不一定就是异步编程。
            异步编程下的函数间数据传递、数组遍历和异常处理与同步编程有很大差别。
            使用domain模块简化异步代码的异常处理，并小心陷阱。

七、大示例
    学习讲究的是学以致用和融会贯通。至此我们已经分别介绍了NodeJS的很多知识点，本章作为最后一章，将完整地介绍一个使用NodeJS开发Web服务器的示例。
    需求
        我们要开发的是一个简单的静态文件合并服务器，该服务器需要支持类似以下格式的JS或CSS文件合并请求。

        http://assets.example.com/foo/??bar.js,baz.js
        在以上URL中，??是一个分隔符，之前是需要合并的多个文件的URL的公共部分，之后是使用,分隔的差异部分。因此服务器处理这个URL时，返回的是以下两个文件按顺序合并后的内容。
        /foo/bar.js
        /foo/baz.js
        另外，服务器也需要能支持类似以下格式的普通的JS或CSS文件请求。
        http://assets.example.com/foo/bar.js
        以上就是整个需求。
    1、第一次迭代
        快速迭代是一种不错的开发方式，因此我们在第一次迭代时先实现服务器的基本功能。

        设计
            简单分析了需求之后，我们大致会得到以下的设计方案。
                           解析          使结合            输出    
                    +---------+   +-----------+   +----------+
            request -->|  parse  |-->|  combine  |-->|  output  |--> response
                    +---------+   +-----------+   +----------+
        也就是说，服务器会首先分析URL，得到请求的文件的路径和类型（MIME）。然后，服务器会读取请求的文件，并按顺序合并文件内容。最后，服务器返回响应，完成对一次请求的处理。

        另外，服务器在读取文件时需要有个根目录，并且服务器监听的HTTP端口最好也不要写死在代码里，因此服务器需要是可配置的。
        实现
            根据以上设计，我们写出了第一版代码如下。

            代码见/seven/1

            以上代码完整实现了服务器所需的功能，并且有以下几点值得注意：
                使用命令行参数传递JSON配置文件路径，入口函数负责读取配置并创建服务器。
                入口函数完整描述了程序的运行逻辑，其中解析URL和合并文件的具体实现封装在其它两个函数里。
                解析URL时先将普通URL转换为了文件合并URL，使得两种URL的处理方式可以一致。
                合并文件时使用异步API读取文件，避免服务器因等待磁盘IO而发生阻塞。
                我们可以把以上代码保存为server.js，之后就可以通过node server.js config.json命令启动程序，于是我们的第一版静态文件合并服务器就顺利完工了。
                另外，以上代码存在一个不那么明显的逻辑缺陷。例如，使用以下URL请求服务器时会有惊喜。
                http://assets.example.com/foo/bar.js,foo/baz.js
                经过分析之后我们会发现问题出在/被自动替换/??这个行为上，而这个问题我们可以到第二次迭代时再解决。

    2、第二次迭代
        在第一次迭代之后，我们已经有了一个可工作的版本，满足了功能需求。接下来我们需要从性能的角度出发，看看代码还有哪些改进余地。
        设计
            把map方法换成for循环或许会更快一些，但第一版代码最大的性能问题存在于从读取文件到输出响应的过程当中。
            我们以处理/??a.js,b.js,c.js这个请求为例，看看整个处理过程中耗时在哪儿。

            发送请求       等待服务端响应         接收响应
            ---------+----------------------+------------->
                    --                                        解析请求
                    ------                                  读取a.js
                            ------                            读取b.js
                                ------                      读取c.js
                                        --                    合并数据
                                        --                  输出响应
            可以看到，第一版代码依次把请求的文件读取到内存中之后，再合并数据和输出响应。这会导致以下两个问题：
            ①当请求的文件比较多比较大时，串行读取文件会比较耗时，从而拉长了服务端响应等待时间。
            ②由于每次响应输出的数据都需要先完整地缓存在内存里，当服务器请求并发数较大时，会有较大的内存开销。
            对于第一个问题，很容易想到把读取文件的方式从串行改为并行。
            但是别这样做，因为对于机械磁盘而言，因为只有一个磁头，尝试并行读取文件只会造成磁头频繁抖动，反而降低IO效率。
            而对于固态硬盘，虽然的确存在多个并行IO通道，但是对于服务器并行处理的多个请求而言，硬盘已经在做并行IO了，对单个请求采用并行IO无异于拆东墙补西墙。
            因此，正确的做法不是改用并行IO，而是一边读取文件一边输出响应，把响应输出时机提前至读取第一个文件的时刻。这样调整后，整个请求处理过程变成下边这样。

                发送请求 等待服务端响应 接收响应
                ---------+----+------------------------------->
                        --                                        解析请求
                        --                                      检查文件是否存在
                            --                                    输出响应头
                            ------                              读取和输出a.js
                                    ------                       读取和输出b.js
                                        ------                  读取和输出c.js

            按上述方式解决第一个问题后，因为服务器不需要完整地缓存每个请求的输出数据了，第二个问题也迎刃而解。

        实现
            根据以上设计，第二版代码按以下方式调整了部分函数。

            代码见/seven/2

            可以看到，第二版代码在检查了请求的所有文件是否有效之后，立即就输出了响应头，并接着一边按顺序读取文件一边输出响应内容。
            并且，在读取文件时，第二版代码直接使用了只读数据流来简化代码。

    3、第三次迭代
        第二次迭代之后，服务器本身的功能和性能已经得到了初步满足。接下来我们需要从稳定性的角度重新审视一下代码，看看还需要做些什么。
        设计
            从工程角度上讲，没有绝对可靠的系统。即使第二次迭代的代码经过反复检查后能确保没有bug，
            也很难说是否会因为NodeJS本身，或者是操作系统本身，甚至是硬件本身导致我们的服务器程序在某一天挂掉。
            因此一般生产环境下的服务器程序都配有一个守护进程，在服务挂掉的时候立即重启服务。
            一般守护进程的代码会远比服务进程的代码简单，从概率上可以保证守护进程更难挂掉。如果再做得严谨一些，甚至守护进程自身可以在自己挂掉时重启自己，从而实现双保险。
            因此在本次迭代时，我们先利用NodeJS的进程管理机制，将守护进程作为父进程，将服务器程序作为子进程，并让父进程监控子进程的运行状态，在其异常退出时重启子进程。
        实现
            根据以上设计，我们编写了守护进程需要的代码。

            代码见/seven/3

            我们可以把守护进程的代码保存为daemon.js，之后我们可以通过node daemon.js config.json启动服务，而守护进程会进一步启动和监控服务器进程。
            此外，为了能够正常终止服务，我们让守护进程在接收到SIGTERM信号时终止服务器进程。
            而在服务器进程这一端，同样在收到SIGTERM信号时先停掉HTTP服务再正常退出。至此，我们的服务器程序就靠谱很多了。

    4、第四次迭代
        在我们解决了服务器本身的功能、性能和可靠性的问题后，接着我们需要考虑一下代码部署的问题，以及服务器控制的问题。
        设计
            一般而言，程序在服务器上有一个固定的部署目录，每次程序有更新后，都重新发布到部署目录里。而一旦完成部署后，一般也可以通过固定的服务控制脚本启动和停止服务。
            因此我们的服务器程序部署目录可以做如下设计。
            - deploy/  //[dɪˈplɔɪ]  部署
            - bin/
                startws.sh
                killws.sh
            + conf/
                config.json
            + lib/
                daemon.js
                server.js
            在以上目录结构中，我们分类存放了服务控制脚本、配置文件和服务器代码。

        实现
            按以上目录结构分别存放对应的文件之后，接下来我们看看控制脚本怎么写。
            首先是start.sh。
                #!/bin/sh
                if [ ! -f "pid" ]
                then
                    node ../lib/daemon.js ../conf/config.json &
                    echo $! > pid
                fi

            然后是killws.sh。
                #!/bin/sh
                if [ -f "pid" ]
                then
                    kill $(tr -d '\r\n' < pid)
                    rm pid
                fi

            于是这样我们就有了一个简单的代码部署目录和服务控制脚本，我们的服务器程序就可以上线工作了。

    5、后续迭代
        我们的服务器程序正式上线工作后，我们接下来或许会发现还有很多可以改进的点。
        比如服务器程序在合并JS文件时可以自动在JS文件之间插入一个;
        来避免一些语法问题，比如服务器程序需要提供日志来统计访问量，比如服务器程序需要能充分利用多核CPU，等等。
        而此时的你，在学习了这么久NodeJS之后，应该已经知道该怎么做了。

    小结
        本章将之前零散介绍的知识点串了起来，完整地演示了一个使用NodeJS开发程序的例子，至此我们的课程就全部结束了。以下是对新诞生的NodeJSer的一些建议。
        要熟悉官方API文档。并不是说要熟悉到能记住每个API的名称和用法，而是要熟悉NodeJS提供了哪些功能，一旦需要时知道查询API文档的哪块地方。
        要先设计再实现。在开发一个程序前首先要有一个全局的设计，不一定要很周全，但要足够能写出一些代码。
        要实现后再设计。在写了一些代码，有了一些具体的东西后，一定会发现一些之前忽略掉的细节。这时再反过来改进之前的设计，为第二轮迭代做准备。
        要充分利用三方包。NodeJS有一个庞大的生态圈，在写代码之前先看看有没有现成的三方包能节省不少时间。
        不要迷信三方包。任何事情做过头了就不好了，三方包也是一样。三方包是一个黑盒，每多使用一个三方包，就为程序增加了一份潜在风险。并且三方包很难恰好只提供程序需要的功能，每多使用一个三方包，就让程序更加臃肿一些。因此在决定使用某个三方包之前，最好三思而后行。
                


